class Solution {
public:
    vector<int>an;
    void dfs(int i, vector<int>&vis,vector<int>adj[],int &c)
    {
        vis[i]=1;
          c++;
        for(auto x:adj[i])
        {
             
             
                 if(vis[x]==0)
                 {
                 dfs(x,vis,adj,c); 
                     
                 }
             
               
        }
        return;
    }
    long long countPairs(int n, vector<vector<int>>& adj) {
        vector<int>vis(n+1,0);
    
       vector<int>adj2[n];
        
        for(int i=0;i<adj.size();i++)
        {
            int u=adj[i][0];
            int v=adj[i][1];
            adj2[u].push_back(v);
            adj2[v].push_back(u);
        }
        for(int i=0;i<n;i++)
        {
            if(vis[i]==0)
            {
                int c=0;
              
                dfs(i,vis,adj2,c);
                an.push_back(c);
            }
        }
        long long ans=0,pre=0;
        
     for(int i=0;i<an.size();i++)
     {
         ans=ans+an[i]*pre;
         pre=pre+an[i];
     }
        
        return ans;
        
        
    }
};



https://leetcode.com/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/
